#![allow(dead_code)]

use std::env;
use std::path::Path;
use url::Url;

pub static TEST_BOKEH_AU_0T_VD_30F_854X480_MP4_FILE: &str =
    "tests/files/test-bokeh-au-0t-vd-30f-854x480.mp4";
pub static TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_FILE: &str =
    "tests/files/test-bokeh-au-2t-vd-30f-854x480.mp4";
pub static TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_URI: &str = "https://raw.githubusercontent.com/sitkevij/mpn/main/tests/files/test-bokeh-au-2t-vd-30f-854x480.mp4";

type Result<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;

pub fn get_temp_file_blocking(url: String, file_name: String) -> Result<std::ffi::OsString> {
    let res = reqwest::blocking::get(url)?;
    let file_path = env::temp_dir().join(file_name);
    let mut file = std::fs::File::create(&file_path)?;
    let mut content = std::io::Cursor::new(res.bytes().unwrap());
    std::io::copy(&mut content, &mut file)?;
    Ok(env::temp_dir().join(&file_path).into_os_string())
}

async fn get_temp_file(url: String, file_name: String) -> Result<std::ffi::OsString> {
    let res = reqwest::get(url).await?;
    let file_path = env::temp_dir().join(file_name);
    let mut file = std::fs::File::create(&file_path)?;
    let mut content = std::io::Cursor::new(res.bytes().await?);
    std::io::copy(&mut content, &mut file)?;
    Ok(env::temp_dir().join(&file_path).into_os_string())
}

/**
 * common testing setup
 *
 * let segments = url.path_segments().map(|c| c.collect::<Vec<_>>());
 * let file_path = url.path_segments().unwrap().max();
 */
pub fn setup() {}

pub fn setup_download_test_files() {
    let file_path = get_uri_file_name(TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_URI);
    // println!("{:?}", url.path_segments().unwrap());
    // println!("{:?}", file_path);
    if !Path::new(&file_path).exists() {
        get_file_from_uri_if_not_exists(TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_URI);
    }
}

pub fn get_file_from_uri_if_not_exists(uri_string: &str) {
    let file_path = get_uri_file_name(uri_string);
    // println!("{:?}", url.path_segments().unwrap());
    // println!("{:?}", file_path);
    if !Path::new(&file_path).exists() {
        let _ = get_temp_file_blocking(uri_string.to_string(), file_path);
    }
}

pub fn get_temp_file_path(file_name: String) -> String {
    env::temp_dir()
        .join(file_name)
        .to_str()
        .unwrap()
        .to_string()
}

pub fn get_uri_string_to_url(uri_string: &str) -> url::Url {
    Url::parse(uri_string).unwrap()
}

pub fn get_file_name(url: url::Url) -> String {
    url.path_segments().unwrap().max().unwrap().to_string()
}

pub fn get_uri_file_name(uri_string: &str) -> String {
    let v: Vec<&str> = uri_string.split('/').collect();
    // println!("vector {:#?}", v);
    // println!(
    //     "vector index {:#?}",
    //     v.get(v.len() - 1).unwrap().to_string()
    // );
    // v.get(v.len() - 1).unwrap().to_string()
    v.last().unwrap().to_string()
}

// filename: tests_files_test_bokeh_au_2t_vd_30f_854x480_mp4
// pub const TESTS_FILES_TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_LEN: usize = 256;
// pub const TESTS_FILES_TEST_BOKEH_AU_2T_VD_30F_854X480_MP4: [u8;
//     TESTS_FILES_TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_LEN] = [
//     0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x4d, 0x34, 0x56, 0x20,
//     0x00, 0x00, 0x00, 0x01, 0x4d, 0x34, 0x56, 0x20, 0x4d, 0x34, 0x41, 0x20,
//     0x6d, 0x70, 0x34, 0x32, 0x69, 0x73, 0x6f, 0x6d, 0x00, 0x01, 0xbb, 0xe1,
//     0x6d, 0x6f, 0x6f, 0x76, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x76, 0x68, 0x64,
//     0x00, 0x00, 0x00, 0x00, 0xd6, 0xaa, 0xc3, 0x9c, 0xd6, 0xaa, 0xc3, 0xa5,
//     0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x00, 0x00,
//     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, 0xbc, 0x74, 0x72, 0x61, 0x6b,
//     0x00, 0x00, 0x00, 0x5c, 0x74, 0x6b, 0x68, 0x64, 0x00, 0x00, 0x00, 0x01,
//     0xd6, 0xaa, 0xc3, 0x9c, 0xd6, 0xaa, 0xc3, 0xa5, 0x00, 0x00, 0x00, 0x01,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
//     0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
//     0x65, 0x64, 0x74, 0x73
//     ];

// pub const TESTS_FILES_TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_LEN_512: usize = 512;
// pub const TESTS_FILES_TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_512: [u8;
//     TESTS_FILES_TEST_BOKEH_AU_2T_VD_30F_854X480_MP4_LEN_512]= [
//   0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x4d, 0x34, 0x56, 0x20,
//   0x00, 0x00, 0x00, 0x01, 0x4d, 0x34, 0x56, 0x20, 0x4d, 0x34, 0x41, 0x20,
//   0x6d, 0x70, 0x34, 0x32, 0x69, 0x73, 0x6f, 0x6d, 0x00, 0x01, 0xbb, 0xe1,
//   0x6d, 0x6f, 0x6f, 0x76, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x76, 0x68, 0x64,
//   0x00, 0x00, 0x00, 0x00, 0xd6, 0xaa, 0xc3, 0x9c, 0xd6, 0xaa, 0xc3, 0xa5,
//   0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x00, 0x00,
//   0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, 0xbc, 0x74, 0x72, 0x61, 0x6b,
//   0x00, 0x00, 0x00, 0x5c, 0x74, 0x6b, 0x68, 0x64, 0x00, 0x00, 0x00, 0x01,
//   0xd6, 0xaa, 0xc3, 0x9c, 0xd6, 0xaa, 0xc3, 0xa5, 0x00, 0x00, 0x00, 0x01,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
//   0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
//   0x65, 0x64, 0x74, 0x73, 0x00, 0x00, 0x00, 0x1c, 0x65, 0x6c, 0x73, 0x74,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1e,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x34,
//   0x6d, 0x64, 0x69, 0x61, 0x00, 0x00, 0x00, 0x20, 0x6d, 0x64, 0x68, 0x64,
//   0x00, 0x00, 0x00, 0x00, 0xd6, 0xaa, 0xc3, 0x9c, 0xd6, 0xaa, 0xc3, 0xa5,
//   0x00, 0x00, 0xbb, 0x80, 0x00, 0x00, 0xc4, 0x00, 0x15, 0xc7, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x31, 0x68, 0x64, 0x6c, 0x72, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x73, 0x6f, 0x75, 0x6e, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x72, 0x65,
//   0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x41, 0x75, 0x64, 0x69, 0x6f,
//   0x00, 0x00, 0x00, 0x01, 0xdb, 0x6d, 0x69, 0x6e, 0x66, 0x00, 0x00, 0x00,
//   0x10, 0x73, 0x6d, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x24, 0x64, 0x69, 0x6e, 0x66, 0x00, 0x00, 0x00,
//   0x1c, 0x64, 0x72, 0x65, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x01, 0x00, 0x00, 0x00, 0x0c, 0x75, 0x72, 0x6c, 0x20, 0x00, 0x00, 0x00,
//   0x01, 0x00, 0x00, 0x01, 0x9f, 0x73, 0x74, 0x62, 0x6c, 0x00, 0x00, 0x00,
//   0x67, 0x73, 0x74, 0x73, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x01, 0x00, 0x00, 0x00, 0x57, 0x6d, 0x70, 0x34, 0x61, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//   0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x80, 0x00,
//   0x00, 0x00, 0x00, 0x00, 0x33, 0x65, 0x73, 0x64, 0x73, 0x00, 0x00, 0x00,
//   0x00, 0x03, 0x80, 0x80, 0x80, 0x22, 0x00, 0x00
// ];
